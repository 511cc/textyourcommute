#!/usr/bin/env node
const async = require('async');
const debug = require('debug')('textyourcommute');
const nconf = require('nconf');
const moment = require('moment-timezone');
const argv = require('yargs').argv;
nconf
  .argv()
  .env()
  .file({file:'./config.json'});

const twilio = require('twilio');
const client = twilio(nconf.get('TWILIO_SID'), nconf.get('TWILIO_AUTH_TOKEN'));

const db = require('mongoose').connect(nconf.get('MONGOLAB_URI'));

require('../models/models').setupModels();

const IntroSurvey = db.model('survey');
const DailySurvey = db.model('daily_survey');

const questions = require('../lib/questions');

function sendSMS(to, body, cb) {
  debug(`Sending SMS to ${to}`);
  client.sendMessage({
    to: to,
    from: nconf.get('TWILIO_NUMBER'),
    body: body
  }, (e, response) => {
    if(e) {
      console.error(e);
    }
    cb();
  });
}

function sendCommuteQuestion(user, cb) {
  const date = moment().tz('America/Los_Angeles').startOf('day');
  if(argv.type === 'am') {

    const dailySurvey = new DailySurvey({
      src: user.src,
      date: date
    });
    dailySurvey.save()
      .then(() => {
        // ask if user commuted
        sendSMS(user.src, questions.daily, (e) => {
          if(e) {
            return cb(e);
          }
          // Wait a bit, so we spread out the SMS
          setTimeout(cb, 500);
        });
      }, cb);
  } else if(argv.type === 'pm') {
    DailySurvey.findOne({src: user.src, date: date})
      .then((dailySurvey) => {
        if(!dailySurvey) {
          debug(`Skipping ${user.src} becasue no daily_survey found`);
          cb();
        } else if(dailySurvey.commuted && dailySurvey.amMode) {
          sendSMS(user.src, questions.dailyEvening, cb);
        } else {
          debug(`Skipping ${user.src} because commuted=${dailySurvey.commuted} amMode=${dailySurvey.amMode}`);
          cb();
        }
      }, cb);
  } else {
    cb();
  }
}

function handleError(e) {
  console.error(e.stack);
  process.exit(1);
}

function sendDailySurvey() {
  const query = {status: 'completed'};

  // Only send weekend surveys to users who indicated that they work on weekends
  const dayOfWeek = moment().tz('America/Los_Angeles').day();
  if (dayOfWeek === 0 || dayOfWeek === 6) {
    query['answers.number'] = 4;
    query['answers.answer'] = 'yes';
  }

  IntroSurvey.find(query)
    .then((users) => {
      async.eachLimit(users, 5, sendCommuteQuestion, (e) => {
        if (e) {
          console.error(e);
        }
        debug('Complete');
        process.exit(0);
      });
    }, handleError);
}


// Trigger survey
sendDailySurvey();
