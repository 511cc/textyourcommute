#!/usr/bin/env node
const async = require('async');
const debug = require('debug')('textyourcommute');
const nconf = require('nconf');
const moment = require('moment-timezone');
const mongoose = require('mongoose');
const argv = require('yargs').argv;
const Twilio = require('twilio');

const {Survey, DailySurvey} = require('../models/models');

nconf
  .argv()
  .env()
  .file({file: './config.json'});

const client = new Twilio(nconf.get('TWILIO_SID'), nconf.get('TWILIO_AUTH_TOKEN'));

mongoose.Promise = global.Promise;
mongoose.connect(nconf.get('MONGOLAB_URI'), {useNewUrlParser: true});

const questions = require('../lib/questions');

function sendSMS(to, body) {
  debug(`Sending SMS to ${to}`);
  return client.messages.create({
    to,
    from: nconf.get('TWILIO_NUMBER'),
    body
  });
}

function isWorkFromHome(response) {
  return response.includes(7);
}

function sendCommuteQuestion(user, cb) {
  const date = moment().tz('America/Los_Angeles').startOf('day');

  const maxSurveyDays = 21;
  DailySurvey.find({src: user.src}).sort({date: 1}).limit(1)
  .then(dailySurvey => {
    if (dailySurvey.length > 0) {
      const surveyDays = date.diff(moment(dailySurvey[0].date), 'days');
      if (surveyDays === maxSurveyDays) {
        if (argv.type === 'am') {
          return sendSMS(user.src, questions.surveyThankyou)
          .then(() => {
            cb();
          });
        }

        return cb();
      } else if (surveyDays > maxSurveyDays) {
        return cb();
      }
    }

    if (argv.type === 'am') {
      const dailySurvey = new DailySurvey({
        src: user.src,
        date
      });
      dailySurvey.save()
        .then(() => {
          // Ask if user commuted
          sendSMS(user.src, questions.daily)
          .then(() => {
            // Wait a bit, so we spread out the SMS
            setTimeout(cb, 500);
          })
          .catch(err => {
            console.error(err);
            cb();
          });
        }, cb);
    } else if (argv.type === 'pm') {
      DailySurvey.findOne({src: user.src, date})
      .then(dailySurvey => {
        if (!dailySurvey) {
          debug(`Skipping ${user.src} because no daily_survey found`);
          cb();
        } else if (dailySurvey.commuted && dailySurvey.amMode && !isWorkFromHome(dailySurvey.amMode)) {
          sendSMS(user.src, questions.dailyEvening)
          .then(() => {
            cb();
          })
          .catch(err => {
            console.error(err);
            cb();
          });
        } else {
          debug(`Skipping ${user.src} because commuted=${dailySurvey.commuted} amMode=${dailySurvey.amMode}`);
          cb();
        }
      }, cb);
    } else {
      cb();
    }
  });
}

function handleError(e) {
  console.error(e.stack);
  process.exit(1);
}

function sendDailySurvey() {
  const query = {status: 'completed'};

  // Only send weekend surveys to users who indicated that they work on weekends
  const dayOfWeek = moment().tz('America/Los_Angeles').day();
  if (dayOfWeek === 0 || dayOfWeek === 6) {
    query.answers = {
      $elemMatch: {
        number: 4,
        answer: 'yes'
      }
    };
  }

  Survey.find(query)
  .then(users => {
    async.eachLimit(users, 5, sendCommuteQuestion, e => {
      if (e) {
        console.error(e);
      }
      debug('Complete');
      process.exit(0);
    });
  }, handleError);
}

// Trigger survey
sendDailySurvey();
